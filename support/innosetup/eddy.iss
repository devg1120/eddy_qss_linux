; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

;#define Debug

; NOTE: uncomment these constant or call the InnoSetup PreProcessor with the /d<name>=<value> command
;#define public EDDY_APPID ""
;#define public EDDY_APPNAME ""
;#define public EDDY_ARCHITECTURE ""
;#define public EDDY_BUGTRACKER ""
;#define public EDDY_BUILD_PATH ""
;#define public EDDY_COPYRIGHT ""
;#define public EDDY_DOWNLOAD_URL ""
;#define public EDDY_EXECUTABLE ""
;#define public EDDY_GRAPHOL_URL ""
;#define public EDDY_LICENSE ""
;#define public EDDY_ORGANIZATION ""
;#define public EDDY_ORGANIZATION_URL ""
;#define public EDDY_PROJECT_HOME ""
;#define public EDDY_VERSION ""

[Setup]
AppID={#EDDY_APPID}
AppCopyright={#EDDY_COPYRIGHT}
AppName={#EDDY_APPNAME}
AppPublisher={#EDDY_ORGANIZATION}
AppPublisherURL={#EDDY_ORGANIZATION_URL}
AppSupportURL={#EDDY_PROJECT_HOME}
AppUpdatesURL={#EDDY_DOWNLOAD_URL}
AppVerName={#EDDY_APPNAME} {#EDDY_VERSION}

AlwaysShowDirOnReadyPage=yes
AlwaysShowGroupOnReadyPage=yes
BackColor=clBlack
BackColor2=clGray
Compression=lzma/Ultra64
ChangesAssociations=yes
DefaultDirName={pf32}\{#EDDY_APPNAME}
DefaultGroupName={#EDDY_APPNAME}
DirExistsWarning=yes
DisableProgramGroupPage=auto
DisableStartupPrompt=yes
EnableDirDoesntExistWarning=no
ExtraDiskSpaceRequired=0
InternalCompressLevel=normal
LicenseFile=../../LICENSE
OutputBaseFilename={#EDDY_APPNAME}-{#EDDY_VERSION}-windows_{#EDDY_ARCHITECTURE}
SetupLogging=no
SolidCompression=yes
VersionInfoCompany={#EDDY_ORGANIZATION}
VersionInfoCopyright={#EDDY_COPYRIGHT}
VersionInfoDescription={#EDDY_APPNAME} setup
VersionInfoProductName={#EDDY_APPNAME}
VersionInfoProductVersion={#EDDY_VERSION}
VersionInfoTextVersion=1.0
VersionInfoVersion=1.0
RestartIfNeededByRun=no
PrivilegesRequired=admin
SetupIconFile=setup.ico
UsePreviousAppDir=yes
WindowResizable=no
WindowShowCaption=no
WindowVisible=no
WizardImageFile=eddy_wizard.bmp
WizardSmallImageFile=eddy_wizard_small.bmp

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Icons]
Name: "{commondesktop}\{#EDDY_APPNAME}"; Filename: "{app}\{#EDDY_EXECUTABLE}"; WorkingDir: "{app}"; IconFilename: "{app}\{#EDDY_EXECUTABLE}"; Comment: "Run {#EDDY_APPNAME} {#EDDY_VERSION}"
Name: "{group}\{#EDDY_APPNAME}"; Filename: "{app}\{#EDDY_EXECUTABLE}"; WorkingDir: "{app}"; IconFilename: "{app}\{#EDDY_EXECUTABLE}"; Comment: "Run {#EDDY_APPNAME} {#EDDY_VERSION}"
Name: "{group}\Bugtracker"; Filename: "{#EDDY_BUGTRACKER}"; Comment: "Open {#EDDY_APPNAME} bugtracker"
Name: "{group}\DIAG - Sapienza university"; Filename: "{#EDDY_ORGANIZATION_URL}"; Comment: "Visit the DIAG website"
Name: "{group}\Graphol website"; Filename: "{#EDDY_GRAPHOL_URL}"; Comment: "Visit the Graphol website"
Name: "{group}\Uninstall"; Filename: "{uninstallexe}"; Comment: "Uninstall {#EDDY_APPNAME}"

[Files]
Source: {#EDDY_BUILD_PATH}\*; DestDir: {app}; Flags: recursesubdirs

[UninstallDelete]
Name: {app}\*; Type: filesandordirs

[Run]
Filename: {app}\{#EDDY_EXECUTABLE}; Description: Run {#EDDY_APPNAME}; Flags: postinstall nowait skipifsilent unchecked

[Registry]
Root: HKCR; Subkey: ".graphol"; ValueType: string; ValueName: ""; ValueData: "{#EDDY_APPNAME}"; Flags: uninsdeletevalue
Root: HKCR; Subkey: "{#EDDY_APPNAME}"; ValueType: string; ValueName: ""; ValueData: "{#EDDY_APPNAME}"; Flags: uninsdeletekey
Root: HKCR; Subkey: "{#EDDY_APPNAME}\DefaultIcon";  ValueData: "{app}\document.ico,0";  ValueType: string;  ValueName: ""
Root: HKCR; Subkey: "{#EDDY_APPNAME}\shell\open\command"; ValueType: string; ValueName: ""; ValueData: """{app}\{#EDDY_EXECUTABLE}"" ""%1"""

[Code]
function GetUninstallString(): String;
var
    sUnInstPath: String;
    sUnInstallString: String;
begin
    sUnInstPath := ExpandConstant('Software\Microsoft\Windows\CurrentVersion\Uninstall\{#emit SetupSetting("AppId")}_is1');
    sUnInstallString := '';
    if not RegQueryStringValue(HKLM, sUnInstPath, 'UninstallString', sUnInstallString) then
        RegQueryStringValue(HKCU, sUnInstPath, 'UninstallString', sUnInstallString);
    Result := sUnInstallString;
end;

function IsUpgrade(): Boolean;
begin
    Result := (GetUninstallString() <> '');
end;

function UnInstallOldVersion(): Integer;
var
    sUnInstallString: String;
    iResultCode: Integer;
begin
    Result := 0;
    sUnInstallString := GetUninstallString();
    if sUnInstallString <> '' then begin
        sUnInstallString := RemoveQuotes(sUnInstallString);
        if Exec(sUnInstallString, '/SILENT /NORESTART /SUPPRESSMSGBOXES','', SW_HIDE, ewWaitUntilTerminated, iResultCode) then
            Result := 3
        else
            Result := 2;
    end else
        Result := 1;
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
    if (CurStep=ssInstall) then
    begin
        if (IsUpgrade()) then
        begin
            UnInstallOldVersion();
        end;
    end;
end;